// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: (devel)
// source: opentelemetry/proto/resource/v1/resource.proto

package opentelemetry_proto_resource_v1

import (
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	v1 "go.opentelemetry.io/proto/lite/otlp/common/v1"
)

// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Resource information.
type Resource struct {
	unknownFields []byte
	// Set of attributes that describe the resource.
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes []*v1.KeyValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0, then
	// no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,2,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"droppedAttributesCount,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
}

func (*Resource) ProtoMessage() {}

func (x *Resource) GetAttributes() []*v1.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Resource) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

// MarshalProtoJSON marshals the Resource message to JSON.
func (x *Resource) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Attributes) > 0 || s.HasField("attributes") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Attributes {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("attributes"))
		}
		s.WriteArrayEnd()
	}
	if x.DroppedAttributesCount != 0 || s.HasField("droppedAttributesCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("droppedAttributesCount")
		s.WriteUint32(x.DroppedAttributesCount)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Resource to JSON.
func (x *Resource) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Resource message from JSON.
func (x *Resource) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "attributes":
			s.AddField("attributes")
			if s.ReadNil() {
				x.Attributes = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Attributes = append(x.Attributes, nil)
					return
				}
				v := &v1.KeyValue{}
				v.UnmarshalProtoJSON(s.WithField("attributes", false))
				if s.Err() != nil {
					return
				}
				x.Attributes = append(x.Attributes, v)
			})
		case "dropped_attributes_count", "droppedAttributesCount":
			s.AddField("dropped_attributes_count")
			x.DroppedAttributesCount = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the Resource from JSON.
func (x *Resource) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
