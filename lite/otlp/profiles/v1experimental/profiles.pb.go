// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version:
// source: opentelemetry/proto/profiles/v1experimental/profiles.proto

package opentelemetry_proto_profiles_v1experimental

import (
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	v11 "go.opentelemetry.io/proto/lite/otlp/common/v1"
	v1 "go.opentelemetry.io/proto/lite/otlp/resource/v1"
)

// Copyright 2023, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ProfilesData represents the profiles data that can be stored in persistent storage,
// OR can be embedded by other protocols that transfer OTLP profiles data but do not
// implement the OTLP protocol.
//
// The main difference between this message and collector protocol is that
// in this message there will not be any "control" or "metadata" specific to
// OTLP protocol.
//
// When new fields are added into this message, the OTLP request MUST be updated
// as well.
type ProfilesData struct {
	unknownFields []byte
	// An array of ResourceProfiles.
	// For data coming from a single resource this array will typically contain
	// one element. Intermediary nodes that receive data from multiple origins
	// typically batch the data before forwarding further and in that case this
	// array will contain multiple elements.
	ResourceProfiles []*ResourceProfiles `protobuf:"bytes,1,rep,name=resource_profiles,json=resourceProfiles,proto3" json:"resourceProfiles,omitempty"`
}

func (x *ProfilesData) Reset() {
	*x = ProfilesData{}
}

func (*ProfilesData) ProtoMessage() {}

func (x *ProfilesData) GetResourceProfiles() []*ResourceProfiles {
	if x != nil {
		return x.ResourceProfiles
	}
	return nil
}

// A collection of ScopeProfiles from a Resource.
type ResourceProfiles struct {
	unknownFields []byte
	// The resource for the profiles in this message.
	// If this field is not set then no resource info is known.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of ScopeProfiles that originate from a resource.
	ScopeProfiles []*ScopeProfiles `protobuf:"bytes,2,rep,name=scope_profiles,json=scopeProfiles,proto3" json:"scopeProfiles,omitempty"`
	// The Schema URL, if known. This is the identifier of the Schema that the resource data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	// This schema_url applies to the data in the "resource" field. It does not apply
	// to the data in the "scope_profiles" field which have their own schema_url field.
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schemaUrl,omitempty"`
}

func (x *ResourceProfiles) Reset() {
	*x = ResourceProfiles{}
}

func (*ResourceProfiles) ProtoMessage() {}

func (x *ResourceProfiles) GetResource() *v1.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceProfiles) GetScopeProfiles() []*ScopeProfiles {
	if x != nil {
		return x.ScopeProfiles
	}
	return nil
}

func (x *ResourceProfiles) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// A collection of ProfileContainers produced by an InstrumentationScope.
type ScopeProfiles struct {
	unknownFields []byte
	// The instrumentation scope information for the profiles in this message.
	// Semantically when InstrumentationScope isn't set, it is equivalent with
	// an empty instrumentation scope name (unknown).
	Scope *v11.InstrumentationScope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// A list of ProfileContainers that originate from an instrumentation scope.
	Profiles []*ProfileContainer `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// The Schema URL, if known. This is the identifier of the Schema that the metric data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	// This schema_url applies to all profiles in the "profiles" field.
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schemaUrl,omitempty"`
}

func (x *ScopeProfiles) Reset() {
	*x = ScopeProfiles{}
}

func (*ScopeProfiles) ProtoMessage() {}

func (x *ScopeProfiles) GetScope() *v11.InstrumentationScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ScopeProfiles) GetProfiles() []*ProfileContainer {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ScopeProfiles) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// A ProfileContainer represents a single profile. It wraps pprof profile with OpenTelemetry specific metadata.
type ProfileContainer struct {
	unknownFields []byte
	// A globally unique identifier for a profile. The ID is a 16-byte array. An ID with
	// all zeroes is considered invalid.
	//
	// This field is required.
	ProfileId []byte `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profileId,omitempty"`
	// start_time_unix_nano is the start time of the profile.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// This field is semantically required and it is expected that end_time >= start_time.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"startTimeUnixNano,omitempty"`
	// end_time_unix_nano is the end time of the profile.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// This field is semantically required and it is expected that end_time >= start_time.
	EndTimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"endTimeUnixNano,omitempty"`
	// attributes is a collection of key/value pairs. Note, global attributes
	// like server name can be set using the resource API. Examples of attributes:
	//
	//	"/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
	//	"/http/server_latency": 300
	//	"abc.com/myattribute": true
	//	"abc.com/score": 10.239
	//
	// The OpenTelemetry API specification further restricts the allowed value types:
	// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes []*v11.KeyValue `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of attributes that were discarded. Attributes
	// can be discarded because their keys are too long or because there are too many
	// attributes. If this value is 0, then no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,5,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"droppedAttributesCount,omitempty"`
	// Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
	OriginalPayloadFormat string `protobuf:"bytes,6,opt,name=original_payload_format,json=originalPayloadFormat,proto3" json:"originalPayloadFormat,omitempty"`
	// Original payload can be stored in this field. This can be useful for users who want to get the original payload.
	// Formats such as JFR are highly extensible and can contain more information than what is defined in this spec.
	// Inclusion of original payload should be configurable by the user. Default behavior should be to not include the original payload.
	// If the original payload is in pprof format, it SHOULD not be included in this field.
	// The field is optional, however if it is present `profile` MUST be present and contain the same profiling information.
	OriginalPayload []byte `protobuf:"bytes,7,opt,name=original_payload,json=originalPayload,proto3" json:"originalPayload,omitempty"`
	// This is a reference to a pprof profile. Required, even when original_payload is present.
	Profile *Profile `protobuf:"bytes,8,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ProfileContainer) Reset() {
	*x = ProfileContainer{}
}

func (*ProfileContainer) ProtoMessage() {}

func (x *ProfileContainer) GetProfileId() []byte {
	if x != nil {
		return x.ProfileId
	}
	return nil
}

func (x *ProfileContainer) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *ProfileContainer) GetEndTimeUnixNano() uint64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *ProfileContainer) GetAttributes() []*v11.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProfileContainer) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

func (x *ProfileContainer) GetOriginalPayloadFormat() string {
	if x != nil {
		return x.OriginalPayloadFormat
	}
	return ""
}

func (x *ProfileContainer) GetOriginalPayload() []byte {
	if x != nil {
		return x.OriginalPayload
	}
	return nil
}

func (x *ProfileContainer) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// MarshalProtoJSON marshals the ProfilesData message to JSON.
func (x *ProfilesData) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.ResourceProfiles) > 0 || s.HasField("resourceProfiles") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("resourceProfiles")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ResourceProfiles {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("resourceProfiles"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ProfilesData to JSON.
func (x *ProfilesData) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ProfilesData message from JSON.
func (x *ProfilesData) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "resource_profiles", "resourceProfiles":
			s.AddField("resource_profiles")
			if s.ReadNil() {
				x.ResourceProfiles = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ResourceProfiles = append(x.ResourceProfiles, nil)
					return
				}
				v := &ResourceProfiles{}
				v.UnmarshalProtoJSON(s.WithField("resource_profiles", false))
				if s.Err() != nil {
					return
				}
				x.ResourceProfiles = append(x.ResourceProfiles, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ProfilesData from JSON.
func (x *ProfilesData) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ResourceProfiles message to JSON.
func (x *ResourceProfiles) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Resource != nil || s.HasField("resource") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("resource")
		x.Resource.MarshalProtoJSON(s.WithField("resource"))
	}
	if len(x.ScopeProfiles) > 0 || s.HasField("scopeProfiles") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("scopeProfiles")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ScopeProfiles {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("scopeProfiles"))
		}
		s.WriteArrayEnd()
	}
	if x.SchemaUrl != "" || s.HasField("schemaUrl") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("schemaUrl")
		s.WriteString(x.SchemaUrl)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ResourceProfiles to JSON.
func (x *ResourceProfiles) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ResourceProfiles message from JSON.
func (x *ResourceProfiles) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "resource":
			if s.ReadNil() {
				x.Resource = nil
				return
			}
			x.Resource = &v1.Resource{}
			x.Resource.UnmarshalProtoJSON(s.WithField("resource", true))
		case "scope_profiles", "scopeProfiles":
			s.AddField("scope_profiles")
			if s.ReadNil() {
				x.ScopeProfiles = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ScopeProfiles = append(x.ScopeProfiles, nil)
					return
				}
				v := &ScopeProfiles{}
				v.UnmarshalProtoJSON(s.WithField("scope_profiles", false))
				if s.Err() != nil {
					return
				}
				x.ScopeProfiles = append(x.ScopeProfiles, v)
			})
		case "schema_url", "schemaUrl":
			s.AddField("schema_url")
			x.SchemaUrl = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ResourceProfiles from JSON.
func (x *ResourceProfiles) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ScopeProfiles message to JSON.
func (x *ScopeProfiles) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Scope != nil || s.HasField("scope") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("scope")
		x.Scope.MarshalProtoJSON(s.WithField("scope"))
	}
	if len(x.Profiles) > 0 || s.HasField("profiles") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("profiles")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Profiles {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("profiles"))
		}
		s.WriteArrayEnd()
	}
	if x.SchemaUrl != "" || s.HasField("schemaUrl") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("schemaUrl")
		s.WriteString(x.SchemaUrl)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ScopeProfiles to JSON.
func (x *ScopeProfiles) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ScopeProfiles message from JSON.
func (x *ScopeProfiles) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "scope":
			if s.ReadNil() {
				x.Scope = nil
				return
			}
			x.Scope = &v11.InstrumentationScope{}
			x.Scope.UnmarshalProtoJSON(s.WithField("scope", true))
		case "profiles":
			s.AddField("profiles")
			if s.ReadNil() {
				x.Profiles = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Profiles = append(x.Profiles, nil)
					return
				}
				v := &ProfileContainer{}
				v.UnmarshalProtoJSON(s.WithField("profiles", false))
				if s.Err() != nil {
					return
				}
				x.Profiles = append(x.Profiles, v)
			})
		case "schema_url", "schemaUrl":
			s.AddField("schema_url")
			x.SchemaUrl = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ScopeProfiles from JSON.
func (x *ScopeProfiles) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ProfileContainer message to JSON.
func (x *ProfileContainer) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.ProfileId) > 0 || s.HasField("profileId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("profileId")
		s.WriteBytes(x.ProfileId)
	}
	if x.StartTimeUnixNano != 0 || s.HasField("startTimeUnixNano") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("startTimeUnixNano")
		s.WriteUint64(x.StartTimeUnixNano)
	}
	if x.EndTimeUnixNano != 0 || s.HasField("endTimeUnixNano") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("endTimeUnixNano")
		s.WriteUint64(x.EndTimeUnixNano)
	}
	if len(x.Attributes) > 0 || s.HasField("attributes") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Attributes {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("attributes"))
		}
		s.WriteArrayEnd()
	}
	if x.DroppedAttributesCount != 0 || s.HasField("droppedAttributesCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("droppedAttributesCount")
		s.WriteUint32(x.DroppedAttributesCount)
	}
	if x.OriginalPayloadFormat != "" || s.HasField("originalPayloadFormat") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("originalPayloadFormat")
		s.WriteString(x.OriginalPayloadFormat)
	}
	if len(x.OriginalPayload) > 0 || s.HasField("originalPayload") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("originalPayload")
		s.WriteBytes(x.OriginalPayload)
	}
	if x.Profile != nil || s.HasField("profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("profile")
		x.Profile.MarshalProtoJSON(s.WithField("profile"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ProfileContainer to JSON.
func (x *ProfileContainer) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ProfileContainer message from JSON.
func (x *ProfileContainer) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "profile_id", "profileId":
			s.AddField("profile_id")
			x.ProfileId = s.ReadBytes()
		case "start_time_unix_nano", "startTimeUnixNano":
			s.AddField("start_time_unix_nano")
			x.StartTimeUnixNano = s.ReadUint64()
		case "end_time_unix_nano", "endTimeUnixNano":
			s.AddField("end_time_unix_nano")
			x.EndTimeUnixNano = s.ReadUint64()
		case "attributes":
			s.AddField("attributes")
			if s.ReadNil() {
				x.Attributes = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Attributes = append(x.Attributes, nil)
					return
				}
				v := &v11.KeyValue{}
				v.UnmarshalProtoJSON(s.WithField("attributes", false))
				if s.Err() != nil {
					return
				}
				x.Attributes = append(x.Attributes, v)
			})
		case "dropped_attributes_count", "droppedAttributesCount":
			s.AddField("dropped_attributes_count")
			x.DroppedAttributesCount = s.ReadUint32()
		case "original_payload_format", "originalPayloadFormat":
			s.AddField("original_payload_format")
			x.OriginalPayloadFormat = s.ReadString()
		case "original_payload", "originalPayload":
			s.AddField("original_payload")
			x.OriginalPayload = s.ReadBytes()
		case "profile":
			if s.ReadNil() {
				x.Profile = nil
				return
			}
			x.Profile = &Profile{}
			x.Profile.UnmarshalProtoJSON(s.WithField("profile", true))
		}
	})
}

// UnmarshalJSON unmarshals the ProfileContainer from JSON.
func (x *ProfileContainer) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
