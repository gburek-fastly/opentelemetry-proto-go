// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version:
// source: opentelemetry/proto/collector/profiles/v1experimental/profiles_service.proto

package opentelemetry_proto_collector_profiles_v1experimental

import (
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	v1experimental "go.opentelemetry.io/proto/lite/otlp/profiles/v1experimental"
)

// Copyright 2023, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type ExportProfilesServiceRequest struct {
	unknownFields []byte
	// An array of ResourceProfiles.
	// For data coming from a single resource this array will typically contain one
	// element. Intermediary nodes (such as OpenTelemetry Collector) that receive
	// data from multiple origins typically batch the data before forwarding further and
	// in that case this array will contain multiple elements.
	ResourceProfiles []*v1experimental.ResourceProfiles `protobuf:"bytes,1,rep,name=resource_profiles,json=resourceProfiles,proto3" json:"resourceProfiles,omitempty"`
}

func (x *ExportProfilesServiceRequest) Reset() {
	*x = ExportProfilesServiceRequest{}
}

func (*ExportProfilesServiceRequest) ProtoMessage() {}

func (x *ExportProfilesServiceRequest) GetResourceProfiles() []*v1experimental.ResourceProfiles {
	if x != nil {
		return x.ResourceProfiles
	}
	return nil
}

type ExportProfilesServiceResponse struct {
	unknownFields []byte
	// The details of a partially successful export request.
	//
	// If the request is only partially accepted
	// (i.e. when the server accepts only parts of the data and rejects the rest)
	// the server MUST initialize the `partial_success` field and MUST
	// set the `rejected_<signal>` with the number of items it rejected.
	//
	// Servers MAY also make use of the `partial_success` field to convey
	// warnings/suggestions to senders even when the request was fully accepted.
	// In such cases, the `rejected_<signal>` MUST have a value of `0` and
	// the `error_message` MUST be non-empty.
	//
	// A `partial_success` message with an empty value (rejected_<signal> = 0 and
	// `error_message` = "") is equivalent to it not being set/present. Senders
	// SHOULD interpret it the same way as in the full success case.
	PartialSuccess *ExportProfilesPartialSuccess `protobuf:"bytes,1,opt,name=partial_success,json=partialSuccess,proto3" json:"partialSuccess,omitempty"`
}

func (x *ExportProfilesServiceResponse) Reset() {
	*x = ExportProfilesServiceResponse{}
}

func (*ExportProfilesServiceResponse) ProtoMessage() {}

func (x *ExportProfilesServiceResponse) GetPartialSuccess() *ExportProfilesPartialSuccess {
	if x != nil {
		return x.PartialSuccess
	}
	return nil
}

type ExportProfilesPartialSuccess struct {
	unknownFields []byte
	// The number of rejected profiles.
	//
	// A `rejected_<signal>` field holding a `0` value indicates that the
	// request was fully accepted.
	RejectedProfiles int64 `protobuf:"varint,1,opt,name=rejected_profiles,json=rejectedProfiles,proto3" json:"rejectedProfiles,omitempty"`
	// A developer-facing human-readable message in English. It should be used
	// either to explain why the server rejected parts of the data during a partial
	// success or to convey warnings/suggestions during a full success. The message
	// should offer guidance on how users can address such issues.
	//
	// error_message is an optional field. An error_message with an empty value
	// is equivalent to it not being set.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *ExportProfilesPartialSuccess) Reset() {
	*x = ExportProfilesPartialSuccess{}
}

func (*ExportProfilesPartialSuccess) ProtoMessage() {}

func (x *ExportProfilesPartialSuccess) GetRejectedProfiles() int64 {
	if x != nil {
		return x.RejectedProfiles
	}
	return 0
}

func (x *ExportProfilesPartialSuccess) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// MarshalProtoJSON marshals the ExportProfilesServiceRequest message to JSON.
func (x *ExportProfilesServiceRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.ResourceProfiles) > 0 || s.HasField("resourceProfiles") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("resourceProfiles")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ResourceProfiles {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("resourceProfiles"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExportProfilesServiceRequest to JSON.
func (x *ExportProfilesServiceRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExportProfilesServiceRequest message from JSON.
func (x *ExportProfilesServiceRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "resource_profiles", "resourceProfiles":
			s.AddField("resource_profiles")
			if s.ReadNil() {
				x.ResourceProfiles = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ResourceProfiles = append(x.ResourceProfiles, nil)
					return
				}
				v := &v1experimental.ResourceProfiles{}
				v.UnmarshalProtoJSON(s.WithField("resource_profiles", false))
				if s.Err() != nil {
					return
				}
				x.ResourceProfiles = append(x.ResourceProfiles, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ExportProfilesServiceRequest from JSON.
func (x *ExportProfilesServiceRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExportProfilesServiceResponse message to JSON.
func (x *ExportProfilesServiceResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.PartialSuccess != nil || s.HasField("partialSuccess") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("partialSuccess")
		x.PartialSuccess.MarshalProtoJSON(s.WithField("partialSuccess"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExportProfilesServiceResponse to JSON.
func (x *ExportProfilesServiceResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExportProfilesServiceResponse message from JSON.
func (x *ExportProfilesServiceResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "partial_success", "partialSuccess":
			if s.ReadNil() {
				x.PartialSuccess = nil
				return
			}
			x.PartialSuccess = &ExportProfilesPartialSuccess{}
			x.PartialSuccess.UnmarshalProtoJSON(s.WithField("partial_success", true))
		}
	})
}

// UnmarshalJSON unmarshals the ExportProfilesServiceResponse from JSON.
func (x *ExportProfilesServiceResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExportProfilesPartialSuccess message to JSON.
func (x *ExportProfilesPartialSuccess) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.RejectedProfiles != 0 || s.HasField("rejectedProfiles") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejectedProfiles")
		s.WriteInt64(x.RejectedProfiles)
	}
	if x.ErrorMessage != "" || s.HasField("errorMessage") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("errorMessage")
		s.WriteString(x.ErrorMessage)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExportProfilesPartialSuccess to JSON.
func (x *ExportProfilesPartialSuccess) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExportProfilesPartialSuccess message from JSON.
func (x *ExportProfilesPartialSuccess) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "rejected_profiles", "rejectedProfiles":
			s.AddField("rejected_profiles")
			x.RejectedProfiles = s.ReadInt64()
		case "error_message", "errorMessage":
			s.AddField("error_message")
			x.ErrorMessage = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ExportProfilesPartialSuccess from JSON.
func (x *ExportProfilesPartialSuccess) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
